{"version":3,"sources":["constants/WidgetActionTypes.js","dispatcher/WidgetDispatcher.js","actions/WidgetActions.js","stores/WidgetStore.js","components/widget/Calc.js","App.js","serviceWorker.js","index.js"],"names":["Dispatcher","data","WidgetDispatcher","dispatch","type","WidgetActionTypes","resetState","sizes","Object","keys","state","result","sort","a","b","map","Number","register","handleActions","bind","this","widgets","250","500","1000","2000","5000","ruleA","ruleB","emit","Math","ceil","i","length","floor","action","clickCalculatePacks","EventEmitter","Calc","props","handleClickCalculatePacks","WidgetStore","on","newState","assign","getState","setState","e","WidgetActions","target","elements","value","preventDefault","Card","CardHeader","className","CardBody","Form","onSubmit","FormGroup","Input","name","id","min","placeholder","required","Button","color","block","CardFooter","JSON","stringify","React","Component","App","Container","Row","Col","lg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ab2e06c.chunk.js","sourcesContent":["export default {\n\tCLICK_CALCULATE_PACKS: 'CLICK_CALCULATE_PACKS'\n}\n","import { Dispatcher } from 'flux';\n\nexport default new Dispatcher();\n","import WidgetActionTypes from '../constants/WidgetActionTypes';\nimport WidgetDispatcher from \"../dispatcher/WidgetDispatcher.js\";\n\nclass WidgetActions {\n\tclickCalculatePacks(data) {\n\t\tWidgetDispatcher.dispatch({\n\t\t\ttype: WidgetActionTypes.CLICK_CALCULATE_PACKS,\n\t\t\tdata: data\n\t\t});\n\t}\n}\n\nexport default new WidgetActions();\n","import WidgetActionTypes from '../constants/WidgetActionTypes';\nimport WidgetDispatcher from \"../dispatcher/WidgetDispatcher.js\";\nimport { EventEmitter } from 'events';\n\nclass WidgetStore extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.resetState();\n\t\tthis.sizes = Object.keys(this.state.result).sort((a, b) => { return a - b; }).map(Number);\n\t\tWidgetDispatcher.register(this.handleActions.bind(this));\n\t}\n\n\tresetState() {\n\t\tthis.state = {\n\t\t\twidgets: 0,\n\t\t\tresult: {\n\t\t\t\t250: 0,\n\t\t\t\t500: 0,\n\t\t\t\t1000: 0,\n\t\t\t\t2000: 0,\n\t\t\t\t5000: 0\n\t\t\t}\n\t\t};\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tclickCalculatePacks(data) {\n\t\tthis.state.widgets = data.widgets;\n\t\tthis.ruleA().ruleB();\n\n\t\tthis.emit(\"click.calculate_packs\");\n\t}\n\n\t/**\n\t * Rule A.\n\t *\n\t * Send out no more widgets than necessary to fulfil the order.\n\t */\n\truleA() {\n\t\tthis.state.result[this.sizes[0]] = Math.ceil(this.state.widgets / this.sizes[0]);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Rule B.\n\t *\n\t * Send out as few packs as possible to fulfil each order.\n\t */\n\truleB() {\n\t\tfor (let i = this.sizes.length - 1; i > 0; i--) {\n\t\t\tif (this.sizes[i] % this.sizes[0] === 0) {\n\t\t\t\tif (this.sizes[0] >= this.sizes[i] / this.sizes[0]) {\n\t\t\t\t\tthis.state.result[this.sizes[i]] = Math.floor(this.sizes[0] * this.state.result[this.sizes[0]] / this.sizes[i]);\n\t\t\t\t\tthis.state.result[this.sizes[0]] = ((this.state.result[this.sizes[0]] * this.sizes[0]) - (this.state.result[this.sizes[i]] * this.sizes[i])) / this.sizes[0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\thandleActions(action) {\n\t\tswitch (action.type) {\n\t\t\tcase WidgetActionTypes.CLICK_CALCULATE_PACKS:\n\t\t\t\tthis.clickCalculatePacks(action.data);\n\t\t\t\tbreak;\n\t\t\tdefault:\n        // do nothing\n\t\t}\n\t}\n}\n\nexport default new WidgetStore();\n","import WidgetActions from '../../actions/WidgetActions.js';\nimport WidgetStore from '../../stores/WidgetStore.js';\nimport {\n  Button, Card, CardBody, CardFooter, CardHeader, Form, FormGroup, Input\n} from 'reactstrap';\nimport React from 'react';\n\nclass Calc extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: \"Here comes the result.\"\n    }\n    this.handleClickCalculatePacks = this.handleClickCalculatePacks.bind(this);\n  }\n\n  componentDidMount() {\n    WidgetStore.on(\"click.calculate_packs\", () => {\n      let newState = Object.assign({}, this.state);\n      newState.result = WidgetStore.getState().result;\n      this.setState(newState);\n    });\n  }\n\n  handleClickCalculatePacks(e) {\n    WidgetActions.clickCalculatePacks({ widgets: e.target.elements.widgets.value });\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <Card>\n        <CardHeader className=\"bg-white\">\n          <h5 className=\"text-center\">Wally's Widget</h5>\n        </CardHeader>\n        <CardBody className=\"d-flex justify-content-center\">\n          <Form className=\"form\" onSubmit={ (e) => this.handleClickCalculatePacks(e) }>\n            <FormGroup>\n              <Input\n                type=\"number\"\n                name=\"widgets\"\n                id=\"widgets\"\n                min={1}\n                placeholder=\"How many widgets?\"\n                required\n              />\n            </FormGroup>\n            <Button color=\"primary\" block>Calculate packs</Button>\n          </Form>\n        </CardBody>\n        <CardFooter className=\"text-muted\">\n          { JSON.stringify(this.state.result) }\n        </CardFooter>\n      </Card>\n    );\n  }\n}\n\nexport { Calc };\n","import React from 'react';\nimport { Calc as WidgetCalc } from \"./components/widget/Calc.js\";\nimport { Col, Container, Row } from 'reactstrap';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Container className=\"App mt-5\">\n      <Row>\n        <Col lg=\"3\"></Col>\n        <Col lg=\"6\">\n          <WidgetCalc />\n        </Col>\n        <Col lg=\"3\"></Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}